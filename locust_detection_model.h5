import cv2
import numpy as np
import tensorflow as tf
import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import transforms
from PIL import Image

# Load a pre-trained TensorFlow model for locust detection (replace with your model)
tf_model = tf.keras.models.load_model('locust_detection_model.h5')

# Load a pre-trained PyTorch model for locust detection (replace with your model)
class CustomLocustModel(nn.Module):
    def __init__(self):
        super(CustomLocustModel, self).__init__()
        # Define your PyTorch model architecture here

    def forward(self, x):
        # Implement the forward pass for your model
        pass

pytorch_model = CustomLocustModel()
pytorch_model.load_state_dict(torch.load('pytorch_locust_detection_model.pth'))
pytorch_model.eval()

# Initialize the camera (you may replace this with your image source)
camera = cv2.VideoCapture(0)  # 0 for the default camera

# Define the target size for the models' input
target_size = (224, 224)  # Adjust to match your model's input size

# Function to preprocess the image for TensorFlow model
def preprocess_tf_image(image):
    processed_image = cv2.resize(image, target_size)
    processed_image = processed_image / 255.0  # Normalize pixel values to [0, 1]
    processed_image = np.expand_dims(processed_image, axis=0)
    return processed_image

# Function to preprocess the image for PyTorch model
def preprocess_pytorch_image(image):
    transform = transforms.Compose([transforms.Resize(target_size), transforms.ToTensor()])
    image = Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    processed_image = transform(image)
    processed_image = processed_image.unsqueeze(0)
    return processed_image

while True:
    ret, frame = camera.read()

    # Preprocess the image for TensorFlow model
    tf_processed_frame = preprocess_tf_image(frame)
    
    # Perform locust detection using the pre-trained TensorFlow model
    tf_locust_prediction = tf_model.predict(tf_processed_frame)
    tf_locust_prob = tf_locust_prediction[0][0]

    # Preprocess the image for PyTorch model
    pytorch_processed_frame = preprocess_pytorch_image(frame)

    # Perform locust detection using the pre-trained PyTorch model
    with torch.no_grad():
        pytorch_locust_prediction = pytorch_model(pytorch_processed_frame)
        pytorch_locust_prob = F.softmax(pytorch_locust_prediction, dim=1)[0][1]

    # Display the results on the image
    tf_label = f'TensorFlow Locust Prob: {tf_locust_prob:.2f}'
    pytorch_label = f'PyTorch Locust Prob: {pytorch_locust_prob:.2f}'
    
    cv2.putText(frame, tf_label, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.putText(frame, pytorch_label, (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    cv2.imshow('Locust Detection', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close OpenCV windows
camera.release()
cv2.destroyAllWindows()
